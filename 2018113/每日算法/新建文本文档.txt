

1.设计一个具有getmin功能的栈





package com.hellojava.stack;

import java.util.Stack;

/** 
 * Stack类 
 * 栈：桶型或箱型数据类型，后进先出，相对堆Heap为二叉树类型，可以快速定位并操作 
 * Stack<E>，支持泛型 
 * public class Stack<E> extends Vector<E> 
 * Stack的方法调用的Vector的方法，被synchronized修饰，为线程安全(Vector也是) 
 * Stack methods： 
 * push : 把项压入堆栈顶部 ，并作为此函数的值返回该对象 
 * pop : 移除堆栈顶部的对象，并作为此函数的值返回该对象  
 * peek : 查看堆栈顶部的对象，并作为此函数的值返回该对象，但不从堆栈中移除它 
 * empty : 测试堆栈是否为空  
 * search : 返回对象在堆栈中的位置，以 1 为基数  
 * */ 
public class Stack_Text {
	private Stack<Integer> stackDate;
	private Stack<Integer> stackMin;
	public Stack_Text() {
		
		this.stackDate = new Stack<Integer>();
		this.stackMin = new Stack<Integer>();
	}
	public void push(int num){
		if(this.stackMin.isEmpty()){
			this.stackMin.push(num);
		}else if(num<=this.getMin()){
			this.stackMin.push(num);//此方法总是将最小的值压如栈顶
		}
		this.stackDate.push(num);//stackDate压入所有传进来的数
	}
	public Integer pop(){
		if(this.stackDate.isEmpty()){
			throw new RuntimeException("Your Stack is Empty！");
		}
		int count=this.stackDate.pop();
		if(count == this.getMin()){//先把存储最小值的栈pop掉
			this.stackMin.pop();
		}
		return count;
	}
	public int getMin(){//获取最小值的方法---从stackMin中找到
		if(this.stackMin.isEmpty()){
			//System.out.println("Your Stack is empty!");
			throw new RuntimeException("Your Stack is empty!");
		}
		return this.stackMin.peek();
	}
	
}



2.用两个栈实现队列



package com.hellojava.stack;

import java.util.Stack;

public class TwoStackQueue {
	private Stack<Integer> stackpush;
	private Stack<Integer> stackpop;
	public TwoStackQueue() {
		
		this.stackpush = new Stack<Integer>();
		this.stackpop = new Stack<Integer>();
	}
	
	public void add(Integer num)
	{
		this.stackpush.push(num);
	}
	public int poll()
	{
		if(stackpush.empty() && stackpop.empty()){
			new RuntimeException("The queue is empty!");
		}else if(stackpop.empty()){
			while(!stackpush.empty()){
				stackpop.push(stackpush.pop());
			}
		}
		return stackpop.pop();//没有移出堆栈顶部的值
	}
	
	public Integer peek(){
		if(stackpop.empty() && stackpush.empty()){
			new RuntimeException("The queue is empty!");
		}else if(stackpop.empty()){
			while(!stackpush.empty()){
				stackpop.push(stackpush.pop());
			}
		}
		return stackpop.peek();//将堆栈中的值移出
	}
	
}

