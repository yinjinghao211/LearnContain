题目描述

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.



改进：
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length==0 || grid[0].length==0){
            return 0;
        }
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                int temp = 0;
                if(i == 0){
                    if(j != 0){
                        temp = grid[i][j-1];
                    }
                }else{
                    if(j == 0){
                        temp = grid[i-1][j];
                    }else{
                        temp = Math.min(grid[i-1][j],grid[i][j-1]);
                    }
                }
                grid[i][j] += temp;
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}



改进：
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length==0 || grid[0].length==0){
            return 0;
        }
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                grid[i][j] = i == 0 ? (j == 0 ? grid[i][j] : grid[i][j-1]+grid[i][j]) : (j == 0 ? grid[i-1][j]+grid[i][j] : Math.min(grid[i-1][j],grid[i][j-1])+grid[i][j] );
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}



改进：
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length==0 || grid[0].length==0){
            return 0;
        }
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                grid[i][j] += i == 0 ? (j == 0 ? 0 : grid[i][j-1]) : (j == 0 ? grid[i-1][j] : Math.min(grid[i-1][j],grid[i][j-1]));
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}