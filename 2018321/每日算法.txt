



ÌâÄ¿ÃèÊö

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree{3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

confused what"{1,#,2,3}"means? > read more on how binary tree is serialized on OJ.


OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node e xists below.

Here's an example:

   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as"{1,2,3,#,#,4,#,#,5}".








import java.util.*;
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public static List<List<Integer>> zigzagLevelOrder(TreeNode root) {  
          
        public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(root == null)
            return res;
        
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        Boolean reverse = false;
        int nextlevel = 0;
        int currlevel = 1;
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        while(!queue.isEmpty()){
                TreeNode t = queue.poll();
                tmp.add(t.val);
                currlevel--;
                
                if(t.left!=null){
                    queue.add(t.left);
                    nextlevel++;
                }
                
                if(t.right!=null){
                    queue.add(t.right);
                    nextlevel++;
                }
            
            if(currlevel == 0){
                currlevel = nextlevel;
                nextlevel = 0;
                if(reverse){
                    Collections.reverse(tmp);
                    reverse = false;
                }else{
                    reverse = true;
                }
                res.add(tmp);
                tmp = new ArrayList<Integer>();
            }
        }
        
        return res;
    }
}