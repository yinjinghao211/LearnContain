题目描述

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

改一：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null || root.left==null && root.right==null){
            return true;
        }
        int leftDepth=getDepth(root.left);
        int rightDepth=getDepth(root.right);
        if(Math.abs(leftDepth-rightDepth) <= 1){
            return isBalanced(root.left) & isBalanced(root.right);
        }else{
            return false;
        }
    }
    public int getDepth(TreeNode root){
        if(root==null){
            return 0;
        }
        int nleft=getDepth(root.left);
        int nright=getDepth(root.right);
        return nleft>nright?nleft+1:nright+1;
    }
}


改二：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null || root.left==null && root.right==null){
            return true;
        }
        int leftDepth=getDepth(root.left);
        int rightDepth=getDepth(root.right);
        if(Math.abs(leftDepth-rightDepth) <= 1){
            return isBalanced(root.left) & isBalanced(root.right);
        }else{
            return false;
        }
    }
    public int getDepth(TreeNode root){
        if(root==null){
            return 0;
        }
        return 1+Math.max(getDepth(root.left),getDepth(root.right));
    }
}


改三：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null || root.left==null && root.right==null){
            return true;
        }
        return Math.abs(getDepth(root.left)-getDepth(root.right)) > 1 ? false : isBalanced(root.left) & isBalanced(root.right);
    }
    public int getDepth(TreeNode root){
        if(root==null){
            return 0;
        }
        return 1+Math.max(getDepth(root.left),getDepth(root.right));
    }
}
改四：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null || root.left==null && root.right==null){
            return true;
        }
        return getDepth(root) == -1 ? false : true;
    }
    public int getDepth(TreeNode root){
        if(root==null){
            return 0;
        }
        int left = getDepth(root.left),right = getDepth(root.right);
        return left == -1 || right == -1 ? -1 : Math.abs(left - right) > 1 ? -1 : 1+ Math.max(left,right);
    }
}