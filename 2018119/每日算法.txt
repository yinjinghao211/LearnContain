1.小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供6个每袋和8个每袋的包装(包装不可拆分)。 可是小易现在只想购买恰好n个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好n个苹果，小易将不会购买。 
输入描述:
输入一个整数n，表示小易想购买n(1 ≤ n ≤ 100)个苹果


输出描述:
输出一个整数表示最少需要购买的袋数，如果不能买恰好n个苹果则输出-1


import java.util.Scanner;

public class Main {

    public static void main(String[] arg) {
        Scanner scan = new Scanner(System.in);
        while (scan.hasNext()) {
            int n = scan.nextInt();
            System.out.println(solve(n));
        }
        scan.close();
    }


    private static int solve(int n) {
        int ans = 0;
        while (n >= 6) {
            if (n % 8 == 0) {
                ans += (n >> 3);
                n = 0;
            }else {
                n -= 6;
                ++ans;
            }
        }
        return n == 0 ? ans : -1;
    }

}
2.A,B,C三个人是好朋友,每个人手里都有一些糖果,我们不知道他们每个人手上具体有多少个糖果,但是我们知道以下的信息：
A - B, B - C, A + B, B + C. 这四个数值.每个字母代表每个人所拥有的糖果数.
现在需要通过这四个数值计算出每个人手里有多少个糖果,即A,B,C。这里保证最多只有一组整数A,B,C满足所有题设条件。 
输入描述:
输入为一行，一共4个整数，分别为A - B，B - C，A + B，B + C，用空格隔开。 范围均在-30到30之间(闭区间)。


输出描述:
输出为一行，如果存在满足的整数A，B，C则按顺序输出A，B，C，用空格隔开，行末无空格。 如果不存在这样的整数A，B，C，则输出No


#include<iostream>
using namespace std;
int main()
{
    int AMB, BMC, APB, BPC;
    int A,B,C;
    bool Flag=false;
    cin>>AMB>>BMC>>APB>>BPC;
    for(int i=0;i<=APB;i++) //遍历先求A
    {
        if(2*i == (APB+AMB))//如果不等，A则没解，直接输出No
        {
            A =i;
            Flag = true;
            break;
        }
    }
    if(Flag == true)        //再求解B和C
    {
        Flag = false;
        B = APB -A;
        C = B - BMC;
        if(C == (BPC - B))  
            Flag = true;
    }
    if(Flag)
        cout<<A<<' '<<B<<' '<<C<<' '<<endl;
    else
        cout<<"NO"<<endl;
    return 0;
}