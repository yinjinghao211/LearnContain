package com.hellojava.binaryTree;

import com.hellojava.node.Node;

public class PrintEdgeNode {
	public void printEdge(Node head){
		if(head==null){
			return ;
		}
		int height =getHeight(head,0);
		Node [][] edgeMap=new Node[height][2];
		setEdgeMap(head,0,edgeMap);
		//打印左边界
		for (int i = 0; i != edgeMap.length; i++) {
			System.out.println(edgeMap[i][0].value+" ");
		}
		
		//打印既不是左边界也不是右边界的叶子节点
		printLeafNotInMap(head,0,edgeMap);
		
		
		//打印右边界但不是左边界的节点
		for(int i=edgeMap.length-1;i!=-1;i--){
			if(edgeMap[i][0]!=edgeMap[i][1]){
				System.out.println(edgeMap[i][1].value+" ");
			}
		}
		
	}

	private void printLeafNotInMap(Node h, int i, Node[][] m) {
		if(h==null){
			return;
		}
		if(h.left==null && h.right==null && h!=m[i] [0] && h!=m[i][1]){
			System.out.println(h.value+" ");
		}
		printLeafNotInMap(h.left, i+1, m);
		printLeafNotInMap(h.right, i+1, m);
		
	}

	//得到每一层上的最左或最右节点
	private void setEdgeMap(Node head, int i, Node[][] edgeMap) {
		if(head==null){
			return;
		}
		edgeMap[i][0]=edgeMap[i][0]==null?head:edgeMap[i][0];
		edgeMap[i][1]=head;
		setEdgeMap(head.left, i+1, edgeMap);
		setEdgeMap(head.right, i+1, edgeMap);
	}

	//获取二叉树最大高度
	private int getHeight(Node head, int i) {
		if(head==null){
			return i;
		}
		return Math.max(getHeight(head.left, i+1),getHeight(head.right, i+1));
	}
}
