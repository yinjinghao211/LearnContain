package com.hellojava.binaryTree;

import java.util.Stack;

import com.hellojava.node.Node;

public class BinaryTreeTraverse2 {
	//用栈进行二叉树的先序遍历,中序遍历,后续遍历
	public void PreOrderUnRecur(Node head){
		System.out.println("PreOrder :  ");
		
		if(head!=null){
			Stack<Node> stack=new Stack<>();
			stack.add(head);
			while(!stack.isEmpty()){
				head=stack.pop();
				head.display();
				if(head.right!=null){
					stack.push(head.right);
				}
				if(head.left !=null){
					stack.push(head.left);
				}
			}
		}
		System.out.println();
	}
	
	public void inOrderUnRecur(Node head){
		System.out.println("inOrder : ");
		if(head!=null){
			Stack<Node> stack =new Stack<>();
			while(!stack.isEmpty() || head!=null){
				if(head!=null){
					stack.push(head);
					head=head.left;
				}else{
					head=stack.pop();
					head.display();
					head=head.right;
				}
			}
		}
		System.out.println();
	}
	//用两个栈进行后序遍历
	public void posOrderUnRecur1(Node head){
		System.out.println("Pos order : ");
		if(head!=null){
			Stack<Node> s1=new Stack<>();
			Stack<Node> s2=new Stack<>();
			s1.push(head);
			while(!s1.isEmpty()){
				head=s1.pop();
				s2.push(head);
				if(head.left!=null){
					s1.push(head.left);
				}
				if(head.right!=null){
					s1.push(head.right);
				}
			}
			while(!s2.isEmpty()){
				s2.pop().display();
			}
		}
		System.out.println();
	}
	public void posOrderUnRecur2(Node h){
		System.out.println("Pos order : ");
		if(h!=null){
			Stack<Node> stack=new Stack<>();
			stack.push(h);
			Node c=null;
			while(!stack.isEmpty()){
				c=stack.peek();
				if(c.left!=null && h!=c.left && h!=c.right ){
					stack.push(c.left);
				}else if(c.right!=null && h!=c.right){
					stack.push(c.right);
				}else{
					stack.pop().display();
					h=c;
				}
			}
		}
		System.out.println();
	}
}
