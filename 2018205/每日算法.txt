
1.将单链表每到K个节点之间逆序
package com.hellojava.entity;

import java.util.Stack;

import com.hellojava.node.Node;

public class ReversePartKNode {
	public Node reverseKNode1(Node head,int K){
		if(K<2){
			return head;
		}
		Stack<Node> stack=new Stack<>();
		Node newHead=head;
		Node cur=head;
		Node pre=null;
		Node next=null;
		while(cur!=null){
			next=cur.next;
			stack.push(cur);
			if(stack.size()==K){
				pre=resign1(stack, pre, next);
				newHead =newHead==head?cur:newHead;
			}
			cur=next;
		}
		return newHead;
	}
	public Node resign1(Stack<Node> stack,Node left,Node right){
		Node cur=stack.pop();
		if(left!=null){
			left.next=cur;
		}
		Node next=null;
		while(!stack.isEmpty()){
			next=stack.pop();
			cur.next=next;
			cur=next;
		}
		cur.next=right;
		return cur;
	}
	
	
	public Node reverseKNode2(Node head,int K){
		if(K<2){
			return head;
		}
		Node cur=head;
		Node start=null;
		Node pre=null;
		Node next=null;
		int count=1;
		while(cur!=null){
			next=cur.next;
			if(count==K){
				start=pre==null?head:pre.next;
				head=pre==null?cur:head;
				resign2(pre, start, cur, next);
				pre=start;
				count=0;
			}
			count++;
			cur=next;
		}
		return head;
	}
	
	
	public void resign2(Node left,Node start,Node end,Node right){
		Node pre=start;
		Node cur=start.next;
		Node next=null;
		while(cur!=right){
			next=cur.next;
			cur.next=pre;
			pre=cur;
			cur=next;
		}
		if(left!=null){
			left.next=end;
			
		}
		start.next=right;
	}
	
	@Test
	public void func(){
		Random random=new Random();
		BuildChain bc=new BuildChain();
		for (int i = 0; i < 10; i++) {
			bc.addFirst(random.nextInt(10));
		}
		bc.displayAll();
		System.out.println();
		ReversePartKNode rpkn=new ReversePartKNode();
		rpkn.reverseKNode1(bc.first, 3);
		bc.displayAll();
	}
		
2.catalan数

package com.hellojava.algorithm;

import java.util.Scanner;
import java.util.Stack;

/**
 * 括号匹配原则问题
 * 一个串只包含有’(‘和’)’，如果每个左括号都能和一个右括号匹配，且左括号在左边，右括号在右边，那么称这个串是括号匹配的。
 * 比如”(())”，”()()”都是括号匹配的，”)(“，“())(“都不是括号匹配的。
 * @author Administrator
 * 实际上就是卡特兰数的问题
 * 令h(0)=1,h(1)=1，catalan数满足递推式： 
	h(n)= h(0)*h(n-1)+h(1)*h(n-2) + … + h(n-1)*h(0) (n>=2) 
	例如：h(2)=h(0)*h(1)+h(1)*h(0)=1*1+1*1=2 
	h(3)=h(0)*h(2)+h(1)*h(1)+h(2)*h(0)=1*2+1*1+2*1=5 
	另类递推式: 
	h(n)=h(n-1)(4*n-2)/(n+1) 
	递推关系的解为： 
	h(n)=C(2n,n)/(n+1) (n=0,1,2,…) 
	递推关系的另类解为： 
	h(n)=c(2n,n)-c(2n,n-1)(n=0,1,2,…)
 */

public class Catalan {
	 public static void main(String[] args) {
	        Scanner sc = new Scanner(System.in);
	        while (sc.hasNextLine()) {
	            String str = sc.nextLine();
	            char[] s = str.toCharArray();
	            Stack<Character> stack = new Stack<>();
	            int num = 1;
	            for(int i = s.length - 1; i >= 0; i--) {
	                if(s[i] == ')'){
	                    stack.push(s[i]);
	                } else {
	                    num *= stack.size();
	                    stack.pop();
	                }
	            }
	            System.out.println(num);
	        }

	    }
}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
